// source: chat.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
goog.exportSymbol('proto.socket.gateway.Group', null, global);
goog.exportSymbol('proto.socket.gateway.Message', null, global);
goog.exportSymbol('proto.socket.gateway.OTP', null, global);
goog.exportSymbol('proto.socket.gateway.OTPType', null, global);
goog.exportSymbol('proto.socket.gateway.User', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.socket.gateway.User = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.socket.gateway.User.repeatedFields_, null);
};
goog.inherits(proto.socket.gateway.User, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.socket.gateway.User.displayName = 'proto.socket.gateway.User';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.socket.gateway.OTP = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.socket.gateway.OTP, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.socket.gateway.OTP.displayName = 'proto.socket.gateway.OTP';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.socket.gateway.Message = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.socket.gateway.Message, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.socket.gateway.Message.displayName = 'proto.socket.gateway.Message';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.socket.gateway.Group = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.socket.gateway.Group.repeatedFields_, null);
};
goog.inherits(proto.socket.gateway.Group, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.socket.gateway.Group.displayName = 'proto.socket.gateway.Group';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.socket.gateway.User.repeatedFields_ = [8,10,11];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.socket.gateway.User.prototype.toObject = function(opt_includeInstance) {
  return proto.socket.gateway.User.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.socket.gateway.User} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.socket.gateway.User.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    fullName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    email: jspb.Message.getFieldWithDefault(msg, 3, ""),
    password: jspb.Message.getFieldWithDefault(msg, 4, ""),
    verified: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
    createdAt: (f = msg.getCreatedAt()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    updatedAt: (f = msg.getUpdatedAt()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    otpsList: jspb.Message.toObjectList(msg.getOtpsList(),
    proto.socket.gateway.OTP.toObject, includeInstance),
    online: jspb.Message.getBooleanFieldWithDefault(msg, 9, false),
    sentMessagesList: jspb.Message.toObjectList(msg.getSentMessagesList(),
    proto.socket.gateway.Message.toObject, includeInstance),
    receivedMessagesList: jspb.Message.toObjectList(msg.getReceivedMessagesList(),
    proto.socket.gateway.Message.toObject, includeInstance),
    privateKey: jspb.Message.getFieldWithDefault(msg, 12, ""),
    publicKey: jspb.Message.getFieldWithDefault(msg, 13, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.socket.gateway.User}
 */
proto.socket.gateway.User.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.socket.gateway.User;
  return proto.socket.gateway.User.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.socket.gateway.User} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.socket.gateway.User}
 */
proto.socket.gateway.User.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFullName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setEmail(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setPassword(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setVerified(value);
      break;
    case 6:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setCreatedAt(value);
      break;
    case 7:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setUpdatedAt(value);
      break;
    case 8:
      var value = new proto.socket.gateway.OTP;
      reader.readMessage(value,proto.socket.gateway.OTP.deserializeBinaryFromReader);
      msg.addOtps(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setOnline(value);
      break;
    case 10:
      var value = new proto.socket.gateway.Message;
      reader.readMessage(value,proto.socket.gateway.Message.deserializeBinaryFromReader);
      msg.addSentMessages(value);
      break;
    case 11:
      var value = new proto.socket.gateway.Message;
      reader.readMessage(value,proto.socket.gateway.Message.deserializeBinaryFromReader);
      msg.addReceivedMessages(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setPrivateKey(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setPublicKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.socket.gateway.User.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.socket.gateway.User.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.socket.gateway.User} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.socket.gateway.User.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFullName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getEmail();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPassword();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getVerified();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getCreatedAt();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getUpdatedAt();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getOtpsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      proto.socket.gateway.OTP.serializeBinaryToWriter
    );
  }
  f = message.getOnline();
  if (f) {
    writer.writeBool(
      9,
      f
    );
  }
  f = message.getSentMessagesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      10,
      f,
      proto.socket.gateway.Message.serializeBinaryToWriter
    );
  }
  f = message.getReceivedMessagesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      11,
      f,
      proto.socket.gateway.Message.serializeBinaryToWriter
    );
  }
  f = message.getPrivateKey();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getPublicKey();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.socket.gateway.User.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.socket.gateway.User} returns this
 */
proto.socket.gateway.User.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string full_name = 2;
 * @return {string}
 */
proto.socket.gateway.User.prototype.getFullName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.socket.gateway.User} returns this
 */
proto.socket.gateway.User.prototype.setFullName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string email = 3;
 * @return {string}
 */
proto.socket.gateway.User.prototype.getEmail = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.socket.gateway.User} returns this
 */
proto.socket.gateway.User.prototype.setEmail = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string password = 4;
 * @return {string}
 */
proto.socket.gateway.User.prototype.getPassword = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.socket.gateway.User} returns this
 */
proto.socket.gateway.User.prototype.setPassword = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional bool verified = 5;
 * @return {boolean}
 */
proto.socket.gateway.User.prototype.getVerified = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.socket.gateway.User} returns this
 */
proto.socket.gateway.User.prototype.setVerified = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional google.protobuf.Timestamp created_at = 6;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.socket.gateway.User.prototype.getCreatedAt = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 6));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.socket.gateway.User} returns this
*/
proto.socket.gateway.User.prototype.setCreatedAt = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.socket.gateway.User} returns this
 */
proto.socket.gateway.User.prototype.clearCreatedAt = function() {
  return this.setCreatedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.socket.gateway.User.prototype.hasCreatedAt = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional google.protobuf.Timestamp updated_at = 7;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.socket.gateway.User.prototype.getUpdatedAt = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 7));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.socket.gateway.User} returns this
*/
proto.socket.gateway.User.prototype.setUpdatedAt = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.socket.gateway.User} returns this
 */
proto.socket.gateway.User.prototype.clearUpdatedAt = function() {
  return this.setUpdatedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.socket.gateway.User.prototype.hasUpdatedAt = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * repeated OTP otps = 8;
 * @return {!Array<!proto.socket.gateway.OTP>}
 */
proto.socket.gateway.User.prototype.getOtpsList = function() {
  return /** @type{!Array<!proto.socket.gateway.OTP>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.socket.gateway.OTP, 8));
};


/**
 * @param {!Array<!proto.socket.gateway.OTP>} value
 * @return {!proto.socket.gateway.User} returns this
*/
proto.socket.gateway.User.prototype.setOtpsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.socket.gateway.OTP=} opt_value
 * @param {number=} opt_index
 * @return {!proto.socket.gateway.OTP}
 */
proto.socket.gateway.User.prototype.addOtps = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.socket.gateway.OTP, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.socket.gateway.User} returns this
 */
proto.socket.gateway.User.prototype.clearOtpsList = function() {
  return this.setOtpsList([]);
};


/**
 * optional bool online = 9;
 * @return {boolean}
 */
proto.socket.gateway.User.prototype.getOnline = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 9, false));
};


/**
 * @param {boolean} value
 * @return {!proto.socket.gateway.User} returns this
 */
proto.socket.gateway.User.prototype.setOnline = function(value) {
  return jspb.Message.setProto3BooleanField(this, 9, value);
};


/**
 * repeated Message sent_messages = 10;
 * @return {!Array<!proto.socket.gateway.Message>}
 */
proto.socket.gateway.User.prototype.getSentMessagesList = function() {
  return /** @type{!Array<!proto.socket.gateway.Message>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.socket.gateway.Message, 10));
};


/**
 * @param {!Array<!proto.socket.gateway.Message>} value
 * @return {!proto.socket.gateway.User} returns this
*/
proto.socket.gateway.User.prototype.setSentMessagesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 10, value);
};


/**
 * @param {!proto.socket.gateway.Message=} opt_value
 * @param {number=} opt_index
 * @return {!proto.socket.gateway.Message}
 */
proto.socket.gateway.User.prototype.addSentMessages = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 10, opt_value, proto.socket.gateway.Message, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.socket.gateway.User} returns this
 */
proto.socket.gateway.User.prototype.clearSentMessagesList = function() {
  return this.setSentMessagesList([]);
};


/**
 * repeated Message received_messages = 11;
 * @return {!Array<!proto.socket.gateway.Message>}
 */
proto.socket.gateway.User.prototype.getReceivedMessagesList = function() {
  return /** @type{!Array<!proto.socket.gateway.Message>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.socket.gateway.Message, 11));
};


/**
 * @param {!Array<!proto.socket.gateway.Message>} value
 * @return {!proto.socket.gateway.User} returns this
*/
proto.socket.gateway.User.prototype.setReceivedMessagesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 11, value);
};


/**
 * @param {!proto.socket.gateway.Message=} opt_value
 * @param {number=} opt_index
 * @return {!proto.socket.gateway.Message}
 */
proto.socket.gateway.User.prototype.addReceivedMessages = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 11, opt_value, proto.socket.gateway.Message, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.socket.gateway.User} returns this
 */
proto.socket.gateway.User.prototype.clearReceivedMessagesList = function() {
  return this.setReceivedMessagesList([]);
};


/**
 * optional string private_key = 12;
 * @return {string}
 */
proto.socket.gateway.User.prototype.getPrivateKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * @param {string} value
 * @return {!proto.socket.gateway.User} returns this
 */
proto.socket.gateway.User.prototype.setPrivateKey = function(value) {
  return jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * optional string public_key = 13;
 * @return {string}
 */
proto.socket.gateway.User.prototype.getPublicKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * @param {string} value
 * @return {!proto.socket.gateway.User} returns this
 */
proto.socket.gateway.User.prototype.setPublicKey = function(value) {
  return jspb.Message.setProto3StringField(this, 13, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.socket.gateway.OTP.prototype.toObject = function(opt_includeInstance) {
  return proto.socket.gateway.OTP.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.socket.gateway.OTP} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.socket.gateway.OTP.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    code: jspb.Message.getFieldWithDefault(msg, 2, ""),
    otpType: jspb.Message.getFieldWithDefault(msg, 3, 0),
    userId: jspb.Message.getFieldWithDefault(msg, 4, ""),
    createdAt: (f = msg.getCreatedAt()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.socket.gateway.OTP}
 */
proto.socket.gateway.OTP.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.socket.gateway.OTP;
  return proto.socket.gateway.OTP.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.socket.gateway.OTP} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.socket.gateway.OTP}
 */
proto.socket.gateway.OTP.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCode(value);
      break;
    case 3:
      var value = /** @type {!proto.socket.gateway.OTPType} */ (reader.readEnum());
      msg.setOtpType(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    case 5:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setCreatedAt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.socket.gateway.OTP.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.socket.gateway.OTP.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.socket.gateway.OTP} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.socket.gateway.OTP.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCode();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getOtpType();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getUserId();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getCreatedAt();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.socket.gateway.OTP.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.socket.gateway.OTP} returns this
 */
proto.socket.gateway.OTP.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string code = 2;
 * @return {string}
 */
proto.socket.gateway.OTP.prototype.getCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.socket.gateway.OTP} returns this
 */
proto.socket.gateway.OTP.prototype.setCode = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional OTPType otp_type = 3;
 * @return {!proto.socket.gateway.OTPType}
 */
proto.socket.gateway.OTP.prototype.getOtpType = function() {
  return /** @type {!proto.socket.gateway.OTPType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.socket.gateway.OTPType} value
 * @return {!proto.socket.gateway.OTP} returns this
 */
proto.socket.gateway.OTP.prototype.setOtpType = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional string user_id = 4;
 * @return {string}
 */
proto.socket.gateway.OTP.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.socket.gateway.OTP} returns this
 */
proto.socket.gateway.OTP.prototype.setUserId = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional google.protobuf.Timestamp created_at = 5;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.socket.gateway.OTP.prototype.getCreatedAt = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 5));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.socket.gateway.OTP} returns this
*/
proto.socket.gateway.OTP.prototype.setCreatedAt = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.socket.gateway.OTP} returns this
 */
proto.socket.gateway.OTP.prototype.clearCreatedAt = function() {
  return this.setCreatedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.socket.gateway.OTP.prototype.hasCreatedAt = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.socket.gateway.Message.prototype.toObject = function(opt_includeInstance) {
  return proto.socket.gateway.Message.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.socket.gateway.Message} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.socket.gateway.Message.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    message: jspb.Message.getFieldWithDefault(msg, 2, ""),
    sender: (f = msg.getSender()) && proto.socket.gateway.User.toObject(includeInstance, f),
    receiver: (f = msg.getReceiver()) && proto.socket.gateway.User.toObject(includeInstance, f),
    createdAt: (f = msg.getCreatedAt()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    isGroupChat: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
    group: (f = msg.getGroup()) && proto.socket.gateway.Group.toObject(includeInstance, f),
    attachedFile: jspb.Message.getFieldWithDefault(msg, 8, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.socket.gateway.Message}
 */
proto.socket.gateway.Message.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.socket.gateway.Message;
  return proto.socket.gateway.Message.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.socket.gateway.Message} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.socket.gateway.Message}
 */
proto.socket.gateway.Message.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    case 3:
      var value = new proto.socket.gateway.User;
      reader.readMessage(value,proto.socket.gateway.User.deserializeBinaryFromReader);
      msg.setSender(value);
      break;
    case 4:
      var value = new proto.socket.gateway.User;
      reader.readMessage(value,proto.socket.gateway.User.deserializeBinaryFromReader);
      msg.setReceiver(value);
      break;
    case 5:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setCreatedAt(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsGroupChat(value);
      break;
    case 7:
      var value = new proto.socket.gateway.Group;
      reader.readMessage(value,proto.socket.gateway.Group.deserializeBinaryFromReader);
      msg.setGroup(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setAttachedFile(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.socket.gateway.Message.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.socket.gateway.Message.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.socket.gateway.Message} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.socket.gateway.Message.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSender();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.socket.gateway.User.serializeBinaryToWriter
    );
  }
  f = message.getReceiver();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.socket.gateway.User.serializeBinaryToWriter
    );
  }
  f = message.getCreatedAt();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getIsGroupChat();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getGroup();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.socket.gateway.Group.serializeBinaryToWriter
    );
  }
  f = message.getAttachedFile();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.socket.gateway.Message.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.socket.gateway.Message} returns this
 */
proto.socket.gateway.Message.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string message = 2;
 * @return {string}
 */
proto.socket.gateway.Message.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.socket.gateway.Message} returns this
 */
proto.socket.gateway.Message.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional User sender = 3;
 * @return {?proto.socket.gateway.User}
 */
proto.socket.gateway.Message.prototype.getSender = function() {
  return /** @type{?proto.socket.gateway.User} */ (
    jspb.Message.getWrapperField(this, proto.socket.gateway.User, 3));
};


/**
 * @param {?proto.socket.gateway.User|undefined} value
 * @return {!proto.socket.gateway.Message} returns this
*/
proto.socket.gateway.Message.prototype.setSender = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.socket.gateway.Message} returns this
 */
proto.socket.gateway.Message.prototype.clearSender = function() {
  return this.setSender(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.socket.gateway.Message.prototype.hasSender = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional User receiver = 4;
 * @return {?proto.socket.gateway.User}
 */
proto.socket.gateway.Message.prototype.getReceiver = function() {
  return /** @type{?proto.socket.gateway.User} */ (
    jspb.Message.getWrapperField(this, proto.socket.gateway.User, 4));
};


/**
 * @param {?proto.socket.gateway.User|undefined} value
 * @return {!proto.socket.gateway.Message} returns this
*/
proto.socket.gateway.Message.prototype.setReceiver = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.socket.gateway.Message} returns this
 */
proto.socket.gateway.Message.prototype.clearReceiver = function() {
  return this.setReceiver(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.socket.gateway.Message.prototype.hasReceiver = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional google.protobuf.Timestamp created_at = 5;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.socket.gateway.Message.prototype.getCreatedAt = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 5));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.socket.gateway.Message} returns this
*/
proto.socket.gateway.Message.prototype.setCreatedAt = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.socket.gateway.Message} returns this
 */
proto.socket.gateway.Message.prototype.clearCreatedAt = function() {
  return this.setCreatedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.socket.gateway.Message.prototype.hasCreatedAt = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional bool is_group_chat = 6;
 * @return {boolean}
 */
proto.socket.gateway.Message.prototype.getIsGroupChat = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.socket.gateway.Message} returns this
 */
proto.socket.gateway.Message.prototype.setIsGroupChat = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * optional Group group = 7;
 * @return {?proto.socket.gateway.Group}
 */
proto.socket.gateway.Message.prototype.getGroup = function() {
  return /** @type{?proto.socket.gateway.Group} */ (
    jspb.Message.getWrapperField(this, proto.socket.gateway.Group, 7));
};


/**
 * @param {?proto.socket.gateway.Group|undefined} value
 * @return {!proto.socket.gateway.Message} returns this
*/
proto.socket.gateway.Message.prototype.setGroup = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.socket.gateway.Message} returns this
 */
proto.socket.gateway.Message.prototype.clearGroup = function() {
  return this.setGroup(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.socket.gateway.Message.prototype.hasGroup = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional string attached_file = 8;
 * @return {string}
 */
proto.socket.gateway.Message.prototype.getAttachedFile = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.socket.gateway.Message} returns this
 */
proto.socket.gateway.Message.prototype.setAttachedFile = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.socket.gateway.Group.repeatedFields_ = [3,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.socket.gateway.Group.prototype.toObject = function(opt_includeInstance) {
  return proto.socket.gateway.Group.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.socket.gateway.Group} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.socket.gateway.Group.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    membersList: jspb.Message.toObjectList(msg.getMembersList(),
    proto.socket.gateway.User.toObject, includeInstance),
    messagesList: jspb.Message.toObjectList(msg.getMessagesList(),
    proto.socket.gateway.Message.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.socket.gateway.Group}
 */
proto.socket.gateway.Group.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.socket.gateway.Group;
  return proto.socket.gateway.Group.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.socket.gateway.Group} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.socket.gateway.Group}
 */
proto.socket.gateway.Group.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = new proto.socket.gateway.User;
      reader.readMessage(value,proto.socket.gateway.User.deserializeBinaryFromReader);
      msg.addMembers(value);
      break;
    case 4:
      var value = new proto.socket.gateway.Message;
      reader.readMessage(value,proto.socket.gateway.Message.deserializeBinaryFromReader);
      msg.addMessages(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.socket.gateway.Group.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.socket.gateway.Group.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.socket.gateway.Group} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.socket.gateway.Group.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getMembersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.socket.gateway.User.serializeBinaryToWriter
    );
  }
  f = message.getMessagesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.socket.gateway.Message.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.socket.gateway.Group.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.socket.gateway.Group} returns this
 */
proto.socket.gateway.Group.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.socket.gateway.Group.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.socket.gateway.Group} returns this
 */
proto.socket.gateway.Group.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated User members = 3;
 * @return {!Array<!proto.socket.gateway.User>}
 */
proto.socket.gateway.Group.prototype.getMembersList = function() {
  return /** @type{!Array<!proto.socket.gateway.User>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.socket.gateway.User, 3));
};


/**
 * @param {!Array<!proto.socket.gateway.User>} value
 * @return {!proto.socket.gateway.Group} returns this
*/
proto.socket.gateway.Group.prototype.setMembersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.socket.gateway.User=} opt_value
 * @param {number=} opt_index
 * @return {!proto.socket.gateway.User}
 */
proto.socket.gateway.Group.prototype.addMembers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.socket.gateway.User, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.socket.gateway.Group} returns this
 */
proto.socket.gateway.Group.prototype.clearMembersList = function() {
  return this.setMembersList([]);
};


/**
 * repeated Message messages = 4;
 * @return {!Array<!proto.socket.gateway.Message>}
 */
proto.socket.gateway.Group.prototype.getMessagesList = function() {
  return /** @type{!Array<!proto.socket.gateway.Message>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.socket.gateway.Message, 4));
};


/**
 * @param {!Array<!proto.socket.gateway.Message>} value
 * @return {!proto.socket.gateway.Group} returns this
*/
proto.socket.gateway.Group.prototype.setMessagesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.socket.gateway.Message=} opt_value
 * @param {number=} opt_index
 * @return {!proto.socket.gateway.Message}
 */
proto.socket.gateway.Group.prototype.addMessages = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.socket.gateway.Message, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.socket.gateway.Group} returns this
 */
proto.socket.gateway.Group.prototype.clearMessagesList = function() {
  return this.setMessagesList([]);
};


/**
 * @enum {number}
 */
proto.socket.gateway.OTPType = {
  EMAIL_VERIFICATION: 0,
  PASSWORD_RESET: 1,
  OTHER: 2
};

goog.object.extend(exports, proto.socket.gateway);
